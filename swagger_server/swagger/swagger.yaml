openapi: 3.0.0
info:
  title: FerryTix
  description: "This is the api for the FerryTix Passenger Ferry Ticketing System,\
    \ that is both accessible to the vending machines and to other clients."
  contact:
    email: hendrik.lankers.hl@googlemail.com
  license:
    name: GNU General Public License V3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
- url: /
security:
- ApiKeyAuth: []
paths:
  /machines:
    get:
      description: list all active vending machines
      operationId: machines_get
      responses:
        "200":
          description: vending machines listed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VendingMachine'
                x-content-type: application/json
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /machines/{uuid}:
    get:
      description: returns a single vending machine
      operationId: machines_uuid_get
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: vending machine found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendingMachine'
        "400":
          description: invalid id
        "404":
          description: no machine with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /machines/{uuid}/status:
    get:
      description: Returns a single vending machine's status.
      operationId: machines_uuid_status_get
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: vending machine found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineStatus'
        "400":
          description: invalid id
        "404":
          description: no machine with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    patch:
      description: Update machine status manually.
      operationId: machines_uuid_status_patch
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineStatus'
        required: true
      responses:
        "200":
          description: Updated config of machine.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineStatus'
        "404":
          description: no machine with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /machines/{uuid}/commands:
    get:
      description: Retrieve a command for a vending machine with the given id. May
        return after an undefined timeout
      operationId: machines_uuid_commands_get
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: command found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineCommand'
        "400":
          description: invalid id
        "404":
          description: no machine with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
    post:
      description: Execute a command on a single vending machine.
      operationId: machines_uuid_commands_post
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineCommand'
        required: true
      responses:
        "201":
          description: Sent command to machine.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineStatus'
        "400":
          description: invalid id
        "404":
          description: no machine with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /machines/defaultConfig:
    patch:
      description: Change the default configuration for all vending machines.
      operationId: machines_default_config_patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineConfiguration'
        required: true
      responses:
        "200":
          description: Updated default config of all machines.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineConfiguration'
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /machines/{uuid}/config:
    patch:
      description: Change the configuration of a vending machine.
      operationId: machines_uuid_config_patch
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MachineConfiguration'
        required: true
      responses:
        "200":
          description: Updated config of machine.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MachineConfiguration'
        "404":
          description: no machine with supplied uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /faehrCard/{uuid}:
    get:
      description: Return full details on a single FaehrCard.
      operationId: faehr_card_uuid_get
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: faehr card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FaehrCard'
        "400":
          description: invalid id
        "404":
          description: no FaehrCard with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /faehrCard/{uuid}/balance:
    get:
      description: Return a FaehrCard's balance.
      operationId: faehr_card_uuid_balance_get
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: faehr card found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "400":
          description: invalid id
        "404":
          description: no FaehrCard with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /faehrCard/{uuid}/topup:
    post:
      description: Top up a FaehrCard's balance.
      operationId: faehr_card_uuid_topup_post
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TopUp'
        required: true
      responses:
        "201":
          description: faehr card topped up
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_201'
        "400":
          description: invalid id
        "404":
          description: no FaehrCard with given uuid found
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /ticketSales/faehrcard:
    post:
      description: Add a ticket sale.
      operationId: ticket_sales_faehrcard_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSaleFaehrCard'
        required: true
      responses:
        "201":
          description: "The ticket sale has been recorded, if applicable, payment\
            \ methods have been charged"
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /ticketSales/ec:
    post:
      description: Add a ticket sale.
      operationId: ticket_sales_ec_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSaleECCard'
        required: true
      responses:
        "201":
          description: "The ticket sale has been recorded, if applicable, payment\
            \ methods have been charged"
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /ticketSales/cash:
    post:
      description: Add a ticket sale.
      operationId: ticket_sales_cash_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketSaleCash'
        required: true
      responses:
        "201":
          description: "The ticket sale has been recorded, if applicable, payment\
            \ methods have been charged"
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /ticketSales/{uuid}/invalidateReturn:
    delete:
      description: Invalidate a return ticket.
      operationId: ticket_sales_uuid_invalidate_return_delete
      parameters:
      - name: uuid
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: The return ticket has been invalidated.
        "402":
          description: "The ticket with the uuid was found, but it isn't a valid return\
            \ ticket."
        "404":
          description: No Ticket with the supplied uuid has been found.
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    FaehrCardPayment:
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the FaehrCard charged.
          format: uuid
        payment:
          $ref: '#/components/schemas/Payment'
      description: Payment Details for FaehrCard Payments.
    CashPayment:
      type: object
      properties:
        denominations:
          type: array
          description: List of coins and bills the payment consists of.
          items:
            type: integer
        change:
          type: array
          description: List of coins and bills the change consists of.
          items:
            type: integer
        payment:
          $ref: '#/components/schemas/Payment'
      description: Payment Details for Cash Payments.
    ECCardPayment:
      type: object
      properties:
        name:
          type: string
        payment:
          $ref: '#/components/schemas/Payment'
    BankTransferPayment:
      type: object
      properties:
        name:
          type: string
        payment:
          $ref: '#/components/schemas/Payment'
    PayPalPayment:
      type: object
      properties:
        name:
          type: string
        payment:
          $ref: '#/components/schemas/Payment'
    Payment:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        amount:
          type: integer
        method:
          type: string
          enum:
          - FährCard
          - Cash
          - ECCard
          - BankTransfer
          - PayPal
      description: A payment for a ticket sale.
    TicketSaleFaehrCard:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        issuedBy:
          type: string
          format: uuid
        issuedAt:
          type: string
          format: date-time
        returnValid:
          type: boolean
          nullable: true
        from:
          $ref: '#/components/schemas/MachineLocation'
        faehrCardPayment:
          $ref: '#/components/schemas/FaehrCardPayment'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        saleCounter:
          type: integer
        signature:
          type: string
      description: A collection of tickets that are paid and used at once.
    TicketSaleECCard:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        issuedBy:
          type: string
          format: uuid
        issuedAt:
          type: string
          format: date-time
        returnValid:
          type: boolean
          nullable: true
        from:
          $ref: '#/components/schemas/MachineLocation'
        ecCardPayment:
          $ref: '#/components/schemas/ECCardPayment'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        saleCounter:
          type: integer
        signature:
          type: string
      description: A collection of tickets that are paid and used at once.
    TicketSaleCash:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        issuedBy:
          type: string
          format: uuid
        issuedAt:
          type: string
          format: date-time
        returnValid:
          type: boolean
          nullable: true
        from:
          $ref: '#/components/schemas/MachineLocation'
        cashPayment:
          $ref: '#/components/schemas/CashPayment'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        saleCounter:
          type: integer
        signature:
          type: string
      description: A collection of tickets that are paid and used at once.
    TicketSalePayPal:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        issuedBy:
          type: string
          format: uuid
        issuedAt:
          type: string
          format: date-time
        returnValid:
          type: boolean
          nullable: true
        from:
          $ref: '#/components/schemas/MachineLocation'
        payPalPayment:
          $ref: '#/components/schemas/PayPalPayment'
        positions:
          type: array
          items:
            $ref: '#/components/schemas/Position'
        saleCounter:
          type: integer
        signature:
          type: string
      description: A collection of tickets that are paid and used at once.
    Position:
      type: object
      properties:
        fare:
          $ref: '#/components/schemas/Fare'
        count:
          type: integer
    TicketClass:
      type: object
      properties:
        bicycle:
          type: boolean
          description: whether or not a bicycle was carried
        return:
          type: boolean
          description: whether or not a return trip has been purchased
        reduced:
          type: boolean
          description: reduced fare for physically disabled persons and children under
            the age of 14
        staff:
          type: boolean
          description: only for staff members
      example:
        bicycle: true
        reduced: true
        staff: true
        return: true
    TopUp:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        for:
          type: string
          description: UUID of the FaehrCard the TopUp is for.
          format: uuid
        issuedAt:
          type: string
          format: date-time
        issuedBy:
          type: string
          description: The id of the vending machine that the topup has been purchased
            at. Is null if purchased online
          format: uuid
        amount:
          type: integer
        paid:
          type: integer
        payment:
          $ref: '#/components/schemas/FaehrCardPayment'
        initial:
          type: boolean
          description: Describes whether the top up was done when the card was issued
        saleCounter:
          type: integer
        signature:
          type: string
    StaffMember:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/StaffRole'
      description: Staff members work for the ferry and are granted free rides.
    StaffRole:
      type: string
      enum:
      - Admin
      - Captain
      - Cashier
      - other
    FaehrCard:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        ownedBy:
          type: string
          format: uuid
          nullable: true
        balance:
          type: integer
        issuedAt:
          type: string
          format: date-time
        issuedBy:
          type: string
          format: uuid
          nullable: true
      example:
        balance: 0
        issuedBy: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        issuedAt: 2000-01-23T04:56:07.000+00:00
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        ownedBy: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    MachineConfiguration:
      type: object
      properties:
        forMachine:
          type: string
          description: The machine id for which to apply these settings. May be left
            empty in a POST request if applicable for all machines.
          format: uuid
        maxBicycles:
          type: integer
        maxBicyclesTolerance:
          type: integer
          description: "Tolerance fot the maximal amount of passengers carrying a\
            \ bicycle in the waiting area. This will determine, to what extend the\
            \ maximum may be exceeded in some situations."
        maxPassengers:
          type: integer
        maxPassengersTolerance:
          type: integer
          description: "Tolerance fot the maximal amount of passengers in the waiting\
            \ area. This will determine, to what extend the maximum may be exceeded\
            \ in some situations."
        fares:
          type: array
          items:
            $ref: '#/components/schemas/Fare'
      description: "Object to hold configuration for vending machines, data that can\
        \ be changed by admins"
      example:
        forMachine: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        maxPassengersTolerance: 5
        maxBicycles: 0
        maxBicyclesTolerance: 6
        maxPassengers: 1
        fares:
        - fare: 5
          ticketClass:
            bicycle: true
            reduced: true
            staff: true
            return: true
        - fare: 5
          ticketClass:
            bicycle: true
            reduced: true
            staff: true
            return: true
    Fare:
      type: object
      properties:
        ticketClass:
          $ref: '#/components/schemas/TicketClass'
        fare:
          type: integer
      description: The price that tickets of a given ticket class are sold for (in
        cents)
      example:
        fare: 5
        ticketClass:
          bicycle: true
          reduced: true
          staff: true
          return: true
    RefillPaperRollCommand:
      type: object
      properties:
        rollLength:
          type: number
    MachineCommand:
      type: object
      description: An order issued by an admin for a machine to perform an action
      oneOf:
      - type: string
        enum:
        - setSignalRed
        - setSignalGreen
        - mainPowerOff
        - mainPowerOn
      - $ref: '#/components/schemas/RefillPaperRollCommand'
    MachineLocation:
      type: string
      enum:
      - Bislich
      - Xanten
    VendingMachine:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        publicKey:
          type: string
        location:
          $ref: '#/components/schemas/MachineLocation'
      example:
        location: Bislich
        publicKey: publicKey
        uuid: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
    MachineStatus:
      type: object
      properties:
        vending:
          type: boolean
        batteryCharge:
          type: number
        estimatedReceiptPaperFillLevel:
          type: number
          example: 0.98
        receiptPaperRollLength:
          type: integer
          example: 50
        cpuTemperature:
          type: number
        ticketsSoldToday:
          $ref: '#/components/schemas/MachineStatus_ticketsSoldToday'
        volumeOfSalesToday:
          type: integer
        waiting:
          type: array
          items:
            $ref: '#/components/schemas/WaitingPassenger'
        saleCounter:
          type: integer
          description: "Current sale counter. Each vending machine has its own counter,\
            \ that increases when a sale (TicketSale or TopUp) is completed. The sale\
            \ counter can't be changed from the outside."
      description: "The status of a machine, generated partly by the backend"
      example:
        saleCounter: 2
        cpuTemperature: 6.02745618307040320615897144307382404804229736328125
        receiptPaperRollLength: 50
        waiting:
        - waitingSince: 2000-01-23T04:56:07.000+00:00
          ticketClass:
            bicycle: true
            reduced: true
            staff: true
            return: true
        - waitingSince: 2000-01-23T04:56:07.000+00:00
          ticketClass:
            bicycle: true
            reduced: true
            staff: true
            return: true
        batteryCharge: 0.80082819046101150206595775671303272247314453125
        ticketsSoldToday:
          withBicycle: 1
          withoutBicycle: 5
        vending: true
        volumeOfSalesToday: 5
        estimatedReceiptPaperFillLevel: 0.98
    WaitingPassenger:
      type: object
      properties:
        ticketClass:
          $ref: '#/components/schemas/TicketClass'
        waitingSince:
          type: string
          format: date-time
      description: A passenger waiting in the waiting area
      example:
        waitingSince: 2000-01-23T04:56:07.000+00:00
        ticketClass:
          bicycle: true
          reduced: true
          staff: true
          return: true
    inline_response_200:
      type: object
      properties:
        balance:
          type: integer
      example:
        balance: 0
    inline_response_201:
      type: object
      properties:
        newbalance:
          type: integer
      example:
        newbalance: 0
    MachineStatus_ticketsSoldToday:
      type: object
      properties:
        withBicycle:
          type: integer
        withoutBicycle:
          type: integer
      example:
        withBicycle: 1
        withoutBicycle: 5
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: X-API-KEY
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_api_key_auth

