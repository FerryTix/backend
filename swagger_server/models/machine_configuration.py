# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.fare import Fare  # noqa: F401,E501
from swagger_server import util


class MachineConfiguration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, for_machine: str=None, max_bicycles: int=None, max_bicycles_tolerance: int=None, max_passengers: int=None, max_passengers_tolerance: int=None, fares: List[Fare]=None):  # noqa: E501
        """MachineConfiguration - a model defined in Swagger

        :param for_machine: The for_machine of this MachineConfiguration.  # noqa: E501
        :type for_machine: str
        :param max_bicycles: The max_bicycles of this MachineConfiguration.  # noqa: E501
        :type max_bicycles: int
        :param max_bicycles_tolerance: The max_bicycles_tolerance of this MachineConfiguration.  # noqa: E501
        :type max_bicycles_tolerance: int
        :param max_passengers: The max_passengers of this MachineConfiguration.  # noqa: E501
        :type max_passengers: int
        :param max_passengers_tolerance: The max_passengers_tolerance of this MachineConfiguration.  # noqa: E501
        :type max_passengers_tolerance: int
        :param fares: The fares of this MachineConfiguration.  # noqa: E501
        :type fares: List[Fare]
        """
        self.swagger_types = {
            'for_machine': str,
            'max_bicycles': int,
            'max_bicycles_tolerance': int,
            'max_passengers': int,
            'max_passengers_tolerance': int,
            'fares': List[Fare]
        }

        self.attribute_map = {
            'for_machine': 'forMachine',
            'max_bicycles': 'maxBicycles',
            'max_bicycles_tolerance': 'maxBicyclesTolerance',
            'max_passengers': 'maxPassengers',
            'max_passengers_tolerance': 'maxPassengersTolerance',
            'fares': 'fares'
        }
        self._for_machine = for_machine
        self._max_bicycles = max_bicycles
        self._max_bicycles_tolerance = max_bicycles_tolerance
        self._max_passengers = max_passengers
        self._max_passengers_tolerance = max_passengers_tolerance
        self._fares = fares

    @classmethod
    def from_dict(cls, dikt) -> 'MachineConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineConfiguration of this MachineConfiguration.  # noqa: E501
        :rtype: MachineConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def for_machine(self) -> str:
        """Gets the for_machine of this MachineConfiguration.

        The machine id for which to apply these settings. May be left empty in a POST request if applicable for all machines.  # noqa: E501

        :return: The for_machine of this MachineConfiguration.
        :rtype: str
        """
        return self._for_machine

    @for_machine.setter
    def for_machine(self, for_machine: str):
        """Sets the for_machine of this MachineConfiguration.

        The machine id for which to apply these settings. May be left empty in a POST request if applicable for all machines.  # noqa: E501

        :param for_machine: The for_machine of this MachineConfiguration.
        :type for_machine: str
        """

        self._for_machine = for_machine

    @property
    def max_bicycles(self) -> int:
        """Gets the max_bicycles of this MachineConfiguration.


        :return: The max_bicycles of this MachineConfiguration.
        :rtype: int
        """
        return self._max_bicycles

    @max_bicycles.setter
    def max_bicycles(self, max_bicycles: int):
        """Sets the max_bicycles of this MachineConfiguration.


        :param max_bicycles: The max_bicycles of this MachineConfiguration.
        :type max_bicycles: int
        """

        self._max_bicycles = max_bicycles

    @property
    def max_bicycles_tolerance(self) -> int:
        """Gets the max_bicycles_tolerance of this MachineConfiguration.

        Tolerance fot the maximal amount of passengers carrying a bicycle in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :return: The max_bicycles_tolerance of this MachineConfiguration.
        :rtype: int
        """
        return self._max_bicycles_tolerance

    @max_bicycles_tolerance.setter
    def max_bicycles_tolerance(self, max_bicycles_tolerance: int):
        """Sets the max_bicycles_tolerance of this MachineConfiguration.

        Tolerance fot the maximal amount of passengers carrying a bicycle in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :param max_bicycles_tolerance: The max_bicycles_tolerance of this MachineConfiguration.
        :type max_bicycles_tolerance: int
        """

        self._max_bicycles_tolerance = max_bicycles_tolerance

    @property
    def max_passengers(self) -> int:
        """Gets the max_passengers of this MachineConfiguration.


        :return: The max_passengers of this MachineConfiguration.
        :rtype: int
        """
        return self._max_passengers

    @max_passengers.setter
    def max_passengers(self, max_passengers: int):
        """Sets the max_passengers of this MachineConfiguration.


        :param max_passengers: The max_passengers of this MachineConfiguration.
        :type max_passengers: int
        """

        self._max_passengers = max_passengers

    @property
    def max_passengers_tolerance(self) -> int:
        """Gets the max_passengers_tolerance of this MachineConfiguration.

        Tolerance fot the maximal amount of passengers in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :return: The max_passengers_tolerance of this MachineConfiguration.
        :rtype: int
        """
        return self._max_passengers_tolerance

    @max_passengers_tolerance.setter
    def max_passengers_tolerance(self, max_passengers_tolerance: int):
        """Sets the max_passengers_tolerance of this MachineConfiguration.

        Tolerance fot the maximal amount of passengers in the waiting area. This will determine, to what extend the maximum may be exceeded in some situations.  # noqa: E501

        :param max_passengers_tolerance: The max_passengers_tolerance of this MachineConfiguration.
        :type max_passengers_tolerance: int
        """

        self._max_passengers_tolerance = max_passengers_tolerance

    @property
    def fares(self) -> List[Fare]:
        """Gets the fares of this MachineConfiguration.


        :return: The fares of this MachineConfiguration.
        :rtype: List[Fare]
        """
        return self._fares

    @fares.setter
    def fares(self, fares: List[Fare]):
        """Sets the fares of this MachineConfiguration.


        :param fares: The fares of this MachineConfiguration.
        :type fares: List[Fare]
        """

        self._fares = fares
