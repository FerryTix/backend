# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.machine_location import MachineLocation  # noqa: F401,E501
from swagger_server.models.payment import Payment  # noqa: F401,E501
from swagger_server.models.position import Position  # noqa: F401,E501
from swagger_server import util


class TicketSale(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, issued_by: str=None, issued_at: datetime=None, return_valid: bool=None, _from: MachineLocation=None, payment: Payment=None, positions: List[Position]=None, sale_counter: int=None, signature: str=None):  # noqa: E501
        """TicketSale - a model defined in Swagger

        :param uuid: The uuid of this TicketSale.  # noqa: E501
        :type uuid: str
        :param issued_by: The issued_by of this TicketSale.  # noqa: E501
        :type issued_by: str
        :param issued_at: The issued_at of this TicketSale.  # noqa: E501
        :type issued_at: datetime
        :param return_valid: The return_valid of this TicketSale.  # noqa: E501
        :type return_valid: bool
        :param _from: The _from of this TicketSale.  # noqa: E501
        :type _from: MachineLocation
        :param payment: The payment of this TicketSale.  # noqa: E501
        :type payment: Payment
        :param positions: The positions of this TicketSale.  # noqa: E501
        :type positions: List[Position]
        :param sale_counter: The sale_counter of this TicketSale.  # noqa: E501
        :type sale_counter: int
        :param signature: The signature of this TicketSale.  # noqa: E501
        :type signature: str
        """
        self.swagger_types = {
            'uuid': str,
            'issued_by': str,
            'issued_at': datetime,
            'return_valid': bool,
            '_from': MachineLocation,
            'payment': Payment,
            'positions': List[Position],
            'sale_counter': int,
            'signature': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'issued_by': 'issuedBy',
            'issued_at': 'issuedAt',
            'return_valid': 'returnValid',
            '_from': 'from',
            'payment': 'payment',
            'positions': 'positions',
            'sale_counter': 'saleCounter',
            'signature': 'signature'
        }
        self._uuid = uuid
        self._issued_by = issued_by
        self._issued_at = issued_at
        self._return_valid = return_valid
        self.__from = _from
        self._payment = payment
        self._positions = positions
        self._sale_counter = sale_counter
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt) -> 'TicketSale':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TicketSale of this TicketSale.  # noqa: E501
        :rtype: TicketSale
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this TicketSale.


        :return: The uuid of this TicketSale.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this TicketSale.


        :param uuid: The uuid of this TicketSale.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def issued_by(self) -> str:
        """Gets the issued_by of this TicketSale.


        :return: The issued_by of this TicketSale.
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by: str):
        """Sets the issued_by of this TicketSale.


        :param issued_by: The issued_by of this TicketSale.
        :type issued_by: str
        """

        self._issued_by = issued_by

    @property
    def issued_at(self) -> datetime:
        """Gets the issued_at of this TicketSale.


        :return: The issued_at of this TicketSale.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at: datetime):
        """Sets the issued_at of this TicketSale.


        :param issued_at: The issued_at of this TicketSale.
        :type issued_at: datetime
        """

        self._issued_at = issued_at

    @property
    def return_valid(self) -> bool:
        """Gets the return_valid of this TicketSale.


        :return: The return_valid of this TicketSale.
        :rtype: bool
        """
        return self._return_valid

    @return_valid.setter
    def return_valid(self, return_valid: bool):
        """Sets the return_valid of this TicketSale.


        :param return_valid: The return_valid of this TicketSale.
        :type return_valid: bool
        """

        self._return_valid = return_valid

    @property
    def _from(self) -> MachineLocation:
        """Gets the _from of this TicketSale.


        :return: The _from of this TicketSale.
        :rtype: MachineLocation
        """
        return self.__from

    @_from.setter
    def _from(self, _from: MachineLocation):
        """Sets the _from of this TicketSale.


        :param _from: The _from of this TicketSale.
        :type _from: MachineLocation
        """

        self.__from = _from

    @property
    def payment(self) -> Payment:
        """Gets the payment of this TicketSale.


        :return: The payment of this TicketSale.
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment: Payment):
        """Sets the payment of this TicketSale.


        :param payment: The payment of this TicketSale.
        :type payment: Payment
        """

        self._payment = payment

    @property
    def positions(self) -> List[Position]:
        """Gets the positions of this TicketSale.


        :return: The positions of this TicketSale.
        :rtype: List[Position]
        """
        return self._positions

    @positions.setter
    def positions(self, positions: List[Position]):
        """Sets the positions of this TicketSale.


        :param positions: The positions of this TicketSale.
        :type positions: List[Position]
        """

        self._positions = positions

    @property
    def sale_counter(self) -> int:
        """Gets the sale_counter of this TicketSale.


        :return: The sale_counter of this TicketSale.
        :rtype: int
        """
        return self._sale_counter

    @sale_counter.setter
    def sale_counter(self, sale_counter: int):
        """Sets the sale_counter of this TicketSale.


        :param sale_counter: The sale_counter of this TicketSale.
        :type sale_counter: int
        """

        self._sale_counter = sale_counter

    @property
    def signature(self) -> str:
        """Gets the signature of this TicketSale.


        :return: The signature of this TicketSale.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature: str):
        """Sets the signature of this TicketSale.


        :param signature: The signature of this TicketSale.
        :type signature: str
        """

        self._signature = signature
