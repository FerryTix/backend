# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MachineStatusTicketsSoldToday(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, with_bicycle: int=None, without_bicycle: int=None):  # noqa: E501
        """MachineStatusTicketsSoldToday - a model defined in Swagger

        :param with_bicycle: The with_bicycle of this MachineStatusTicketsSoldToday.  # noqa: E501
        :type with_bicycle: int
        :param without_bicycle: The without_bicycle of this MachineStatusTicketsSoldToday.  # noqa: E501
        :type without_bicycle: int
        """
        self.swagger_types = {
            'with_bicycle': int,
            'without_bicycle': int
        }

        self.attribute_map = {
            'with_bicycle': 'withBicycle',
            'without_bicycle': 'withoutBicycle'
        }
        self._with_bicycle = with_bicycle
        self._without_bicycle = without_bicycle

    @classmethod
    def from_dict(cls, dikt) -> 'MachineStatusTicketsSoldToday':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineStatus_ticketsSoldToday of this MachineStatusTicketsSoldToday.  # noqa: E501
        :rtype: MachineStatusTicketsSoldToday
        """
        return util.deserialize_model(dikt, cls)

    @property
    def with_bicycle(self) -> int:
        """Gets the with_bicycle of this MachineStatusTicketsSoldToday.


        :return: The with_bicycle of this MachineStatusTicketsSoldToday.
        :rtype: int
        """
        return self._with_bicycle

    @with_bicycle.setter
    def with_bicycle(self, with_bicycle: int):
        """Sets the with_bicycle of this MachineStatusTicketsSoldToday.


        :param with_bicycle: The with_bicycle of this MachineStatusTicketsSoldToday.
        :type with_bicycle: int
        """

        self._with_bicycle = with_bicycle

    @property
    def without_bicycle(self) -> int:
        """Gets the without_bicycle of this MachineStatusTicketsSoldToday.


        :return: The without_bicycle of this MachineStatusTicketsSoldToday.
        :rtype: int
        """
        return self._without_bicycle

    @without_bicycle.setter
    def without_bicycle(self, without_bicycle: int):
        """Sets the without_bicycle of this MachineStatusTicketsSoldToday.


        :param without_bicycle: The without_bicycle of this MachineStatusTicketsSoldToday.
        :type without_bicycle: int
        """

        self._without_bicycle = without_bicycle
