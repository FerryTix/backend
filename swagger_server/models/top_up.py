# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.cash_payment import CashPayment  # noqa: F401,E501
from swagger_server import util


class TopUp(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, card: str=None, issued_at: datetime=None, issued_by: str=None, amount: int=None, paid: int=None, payment: CashPayment=None, initial: bool=None, sale_counter: int=None, signature: str=None):  # noqa: E501
        """TopUp - a model defined in Swagger

        :param uuid: The uuid of this TopUp.  # noqa: E501
        :type uuid: str
        :param card: The card of this TopUp.  # noqa: E501
        :type card: str
        :param issued_at: The issued_at of this TopUp.  # noqa: E501
        :type issued_at: datetime
        :param issued_by: The issued_by of this TopUp.  # noqa: E501
        :type issued_by: str
        :param amount: The amount of this TopUp.  # noqa: E501
        :type amount: int
        :param paid: The paid of this TopUp.  # noqa: E501
        :type paid: int
        :param payment: The payment of this TopUp.  # noqa: E501
        :type payment: CashPayment
        :param initial: The initial of this TopUp.  # noqa: E501
        :type initial: bool
        :param sale_counter: The sale_counter of this TopUp.  # noqa: E501
        :type sale_counter: int
        :param signature: The signature of this TopUp.  # noqa: E501
        :type signature: str
        """
        self.swagger_types = {
            'uuid': str,
            'card': str,
            'issued_at': datetime,
            'issued_by': str,
            'amount': int,
            'paid': int,
            'payment': CashPayment,
            'initial': bool,
            'sale_counter': int,
            'signature': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'card': 'card',
            'issued_at': 'issuedAt',
            'issued_by': 'issuedBy',
            'amount': 'amount',
            'paid': 'paid',
            'payment': 'payment',
            'initial': 'initial',
            'sale_counter': 'saleCounter',
            'signature': 'signature'
        }
        self._uuid = uuid
        self._card = card
        self._issued_at = issued_at
        self._issued_by = issued_by
        self._amount = amount
        self._paid = paid
        self._payment = payment
        self._initial = initial
        self._sale_counter = sale_counter
        self._signature = signature

    @classmethod
    def from_dict(cls, dikt) -> 'TopUp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TopUp of this TopUp.  # noqa: E501
        :rtype: TopUp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this TopUp.


        :return: The uuid of this TopUp.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this TopUp.


        :param uuid: The uuid of this TopUp.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def card(self) -> str:
        """Gets the card of this TopUp.

        UUID of the FaehrCard the TopUp is for.  # noqa: E501

        :return: The card of this TopUp.
        :rtype: str
        """
        return self._card

    @card.setter
    def card(self, card: str):
        """Sets the card of this TopUp.

        UUID of the FaehrCard the TopUp is for.  # noqa: E501

        :param card: The card of this TopUp.
        :type card: str
        """

        self._card = card

    @property
    def issued_at(self) -> datetime:
        """Gets the issued_at of this TopUp.


        :return: The issued_at of this TopUp.
        :rtype: datetime
        """
        return self._issued_at

    @issued_at.setter
    def issued_at(self, issued_at: datetime):
        """Sets the issued_at of this TopUp.


        :param issued_at: The issued_at of this TopUp.
        :type issued_at: datetime
        """

        self._issued_at = issued_at

    @property
    def issued_by(self) -> str:
        """Gets the issued_by of this TopUp.

        The id of the vending machine that the topup has been purchased at. Is null if purchased online  # noqa: E501

        :return: The issued_by of this TopUp.
        :rtype: str
        """
        return self._issued_by

    @issued_by.setter
    def issued_by(self, issued_by: str):
        """Sets the issued_by of this TopUp.

        The id of the vending machine that the topup has been purchased at. Is null if purchased online  # noqa: E501

        :param issued_by: The issued_by of this TopUp.
        :type issued_by: str
        """

        self._issued_by = issued_by

    @property
    def amount(self) -> int:
        """Gets the amount of this TopUp.


        :return: The amount of this TopUp.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this TopUp.


        :param amount: The amount of this TopUp.
        :type amount: int
        """

        self._amount = amount

    @property
    def paid(self) -> int:
        """Gets the paid of this TopUp.


        :return: The paid of this TopUp.
        :rtype: int
        """
        return self._paid

    @paid.setter
    def paid(self, paid: int):
        """Sets the paid of this TopUp.


        :param paid: The paid of this TopUp.
        :type paid: int
        """

        self._paid = paid

    @property
    def payment(self) -> CashPayment:
        """Gets the payment of this TopUp.


        :return: The payment of this TopUp.
        :rtype: CashPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment: CashPayment):
        """Sets the payment of this TopUp.


        :param payment: The payment of this TopUp.
        :type payment: CashPayment
        """

        self._payment = payment

    @property
    def initial(self) -> bool:
        """Gets the initial of this TopUp.

        Describes whether the top up was done when the card was issued  # noqa: E501

        :return: The initial of this TopUp.
        :rtype: bool
        """
        return self._initial

    @initial.setter
    def initial(self, initial: bool):
        """Sets the initial of this TopUp.

        Describes whether the top up was done when the card was issued  # noqa: E501

        :param initial: The initial of this TopUp.
        :type initial: bool
        """

        self._initial = initial

    @property
    def sale_counter(self) -> int:
        """Gets the sale_counter of this TopUp.


        :return: The sale_counter of this TopUp.
        :rtype: int
        """
        return self._sale_counter

    @sale_counter.setter
    def sale_counter(self, sale_counter: int):
        """Sets the sale_counter of this TopUp.


        :param sale_counter: The sale_counter of this TopUp.
        :type sale_counter: int
        """

        self._sale_counter = sale_counter

    @property
    def signature(self) -> str:
        """Gets the signature of this TopUp.


        :return: The signature of this TopUp.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature: str):
        """Sets the signature of this TopUp.


        :param signature: The signature of this TopUp.
        :type signature: str
        """

        self._signature = signature
