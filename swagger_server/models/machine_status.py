# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.machine_status_tickets_sold_today import MachineStatusTicketsSoldToday  # noqa: F401,E501
from swagger_server.models.waiting_passenger import WaitingPassenger  # noqa: F401,E501
from swagger_server import util


class MachineStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, vending: bool=None, battery_charge: float=None, estimated_receipt_paper_fill_level: float=None, receipt_paper_roll_length: int=None, cpu_temperature: float=None, tickets_sold_today: MachineStatusTicketsSoldToday=None, volume_of_sales_today: int=None, waiting: List[WaitingPassenger]=None, sale_counter: int=None):  # noqa: E501
        """MachineStatus - a model defined in Swagger

        :param vending: The vending of this MachineStatus.  # noqa: E501
        :type vending: bool
        :param battery_charge: The battery_charge of this MachineStatus.  # noqa: E501
        :type battery_charge: float
        :param estimated_receipt_paper_fill_level: The estimated_receipt_paper_fill_level of this MachineStatus.  # noqa: E501
        :type estimated_receipt_paper_fill_level: float
        :param receipt_paper_roll_length: The receipt_paper_roll_length of this MachineStatus.  # noqa: E501
        :type receipt_paper_roll_length: int
        :param cpu_temperature: The cpu_temperature of this MachineStatus.  # noqa: E501
        :type cpu_temperature: float
        :param tickets_sold_today: The tickets_sold_today of this MachineStatus.  # noqa: E501
        :type tickets_sold_today: MachineStatusTicketsSoldToday
        :param volume_of_sales_today: The volume_of_sales_today of this MachineStatus.  # noqa: E501
        :type volume_of_sales_today: int
        :param waiting: The waiting of this MachineStatus.  # noqa: E501
        :type waiting: List[WaitingPassenger]
        :param sale_counter: The sale_counter of this MachineStatus.  # noqa: E501
        :type sale_counter: int
        """
        self.swagger_types = {
            'vending': bool,
            'battery_charge': float,
            'estimated_receipt_paper_fill_level': float,
            'receipt_paper_roll_length': int,
            'cpu_temperature': float,
            'tickets_sold_today': MachineStatusTicketsSoldToday,
            'volume_of_sales_today': int,
            'waiting': List[WaitingPassenger],
            'sale_counter': int
        }

        self.attribute_map = {
            'vending': 'vending',
            'battery_charge': 'batteryCharge',
            'estimated_receipt_paper_fill_level': 'estimatedReceiptPaperFillLevel',
            'receipt_paper_roll_length': 'receiptPaperRollLength',
            'cpu_temperature': 'cpuTemperature',
            'tickets_sold_today': 'ticketsSoldToday',
            'volume_of_sales_today': 'volumeOfSalesToday',
            'waiting': 'waiting',
            'sale_counter': 'saleCounter'
        }
        self._vending = vending
        self._battery_charge = battery_charge
        self._estimated_receipt_paper_fill_level = estimated_receipt_paper_fill_level
        self._receipt_paper_roll_length = receipt_paper_roll_length
        self._cpu_temperature = cpu_temperature
        self._tickets_sold_today = tickets_sold_today
        self._volume_of_sales_today = volume_of_sales_today
        self._waiting = waiting
        self._sale_counter = sale_counter

    @classmethod
    def from_dict(cls, dikt) -> 'MachineStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MachineStatus of this MachineStatus.  # noqa: E501
        :rtype: MachineStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vending(self) -> bool:
        """Gets the vending of this MachineStatus.


        :return: The vending of this MachineStatus.
        :rtype: bool
        """
        return self._vending

    @vending.setter
    def vending(self, vending: bool):
        """Sets the vending of this MachineStatus.


        :param vending: The vending of this MachineStatus.
        :type vending: bool
        """

        self._vending = vending

    @property
    def battery_charge(self) -> float:
        """Gets the battery_charge of this MachineStatus.


        :return: The battery_charge of this MachineStatus.
        :rtype: float
        """
        return self._battery_charge

    @battery_charge.setter
    def battery_charge(self, battery_charge: float):
        """Sets the battery_charge of this MachineStatus.


        :param battery_charge: The battery_charge of this MachineStatus.
        :type battery_charge: float
        """

        self._battery_charge = battery_charge

    @property
    def estimated_receipt_paper_fill_level(self) -> float:
        """Gets the estimated_receipt_paper_fill_level of this MachineStatus.


        :return: The estimated_receipt_paper_fill_level of this MachineStatus.
        :rtype: float
        """
        return self._estimated_receipt_paper_fill_level

    @estimated_receipt_paper_fill_level.setter
    def estimated_receipt_paper_fill_level(self, estimated_receipt_paper_fill_level: float):
        """Sets the estimated_receipt_paper_fill_level of this MachineStatus.


        :param estimated_receipt_paper_fill_level: The estimated_receipt_paper_fill_level of this MachineStatus.
        :type estimated_receipt_paper_fill_level: float
        """

        self._estimated_receipt_paper_fill_level = estimated_receipt_paper_fill_level

    @property
    def receipt_paper_roll_length(self) -> int:
        """Gets the receipt_paper_roll_length of this MachineStatus.


        :return: The receipt_paper_roll_length of this MachineStatus.
        :rtype: int
        """
        return self._receipt_paper_roll_length

    @receipt_paper_roll_length.setter
    def receipt_paper_roll_length(self, receipt_paper_roll_length: int):
        """Sets the receipt_paper_roll_length of this MachineStatus.


        :param receipt_paper_roll_length: The receipt_paper_roll_length of this MachineStatus.
        :type receipt_paper_roll_length: int
        """

        self._receipt_paper_roll_length = receipt_paper_roll_length

    @property
    def cpu_temperature(self) -> float:
        """Gets the cpu_temperature of this MachineStatus.


        :return: The cpu_temperature of this MachineStatus.
        :rtype: float
        """
        return self._cpu_temperature

    @cpu_temperature.setter
    def cpu_temperature(self, cpu_temperature: float):
        """Sets the cpu_temperature of this MachineStatus.


        :param cpu_temperature: The cpu_temperature of this MachineStatus.
        :type cpu_temperature: float
        """

        self._cpu_temperature = cpu_temperature

    @property
    def tickets_sold_today(self) -> MachineStatusTicketsSoldToday:
        """Gets the tickets_sold_today of this MachineStatus.


        :return: The tickets_sold_today of this MachineStatus.
        :rtype: MachineStatusTicketsSoldToday
        """
        return self._tickets_sold_today

    @tickets_sold_today.setter
    def tickets_sold_today(self, tickets_sold_today: MachineStatusTicketsSoldToday):
        """Sets the tickets_sold_today of this MachineStatus.


        :param tickets_sold_today: The tickets_sold_today of this MachineStatus.
        :type tickets_sold_today: MachineStatusTicketsSoldToday
        """

        self._tickets_sold_today = tickets_sold_today

    @property
    def volume_of_sales_today(self) -> int:
        """Gets the volume_of_sales_today of this MachineStatus.


        :return: The volume_of_sales_today of this MachineStatus.
        :rtype: int
        """
        return self._volume_of_sales_today

    @volume_of_sales_today.setter
    def volume_of_sales_today(self, volume_of_sales_today: int):
        """Sets the volume_of_sales_today of this MachineStatus.


        :param volume_of_sales_today: The volume_of_sales_today of this MachineStatus.
        :type volume_of_sales_today: int
        """

        self._volume_of_sales_today = volume_of_sales_today

    @property
    def waiting(self) -> List[WaitingPassenger]:
        """Gets the waiting of this MachineStatus.


        :return: The waiting of this MachineStatus.
        :rtype: List[WaitingPassenger]
        """
        return self._waiting

    @waiting.setter
    def waiting(self, waiting: List[WaitingPassenger]):
        """Sets the waiting of this MachineStatus.


        :param waiting: The waiting of this MachineStatus.
        :type waiting: List[WaitingPassenger]
        """

        self._waiting = waiting

    @property
    def sale_counter(self) -> int:
        """Gets the sale_counter of this MachineStatus.

        Current sale counter. Each vending machine has its own counter, that increases when a sale (TicketSale or TopUp) is completed. The sale counter can't be changed from the outside.  # noqa: E501

        :return: The sale_counter of this MachineStatus.
        :rtype: int
        """
        return self._sale_counter

    @sale_counter.setter
    def sale_counter(self, sale_counter: int):
        """Sets the sale_counter of this MachineStatus.

        Current sale counter. Each vending machine has its own counter, that increases when a sale (TicketSale or TopUp) is completed. The sale counter can't be changed from the outside.  # noqa: E501

        :param sale_counter: The sale_counter of this MachineStatus.
        :type sale_counter: int
        """

        self._sale_counter = sale_counter
