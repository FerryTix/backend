# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Payment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, uuid: str=None, amount: int=None, method: str=None):  # noqa: E501
        """Payment - a model defined in Swagger

        :param uuid: The uuid of this Payment.  # noqa: E501
        :type uuid: str
        :param amount: The amount of this Payment.  # noqa: E501
        :type amount: int
        :param method: The method of this Payment.  # noqa: E501
        :type method: str
        """
        self.swagger_types = {
            'uuid': str,
            'amount': int,
            'method': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'amount': 'amount',
            'method': 'method'
        }
        self._uuid = uuid
        self._amount = amount
        self._method = method

    @classmethod
    def from_dict(cls, dikt) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Payment of this Payment.  # noqa: E501
        :rtype: Payment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Payment.


        :return: The uuid of this Payment.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Payment.


        :param uuid: The uuid of this Payment.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def amount(self) -> int:
        """Gets the amount of this Payment.


        :return: The amount of this Payment.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Payment.


        :param amount: The amount of this Payment.
        :type amount: int
        """

        self._amount = amount

    @property
    def method(self) -> str:
        """Gets the method of this Payment.


        :return: The method of this Payment.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """Sets the method of this Payment.


        :param method: The method of this Payment.
        :type method: str
        """
        allowed_values = ["FÃ¤hrCard", "Cash", "ECCard", "BankTransfer", "PayPal"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method
